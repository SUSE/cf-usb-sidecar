// This file was generated by counterfeiter
package provisionerfakes

import (
	"sync"

	"github.com/hpcloud/catalog-service-manager/services/dev-mssql/provisioner"
)

type FakeMssqlProvisioner struct {
	IsDatabaseCreatedStub        func(databaseId string) (bool, error)
	isDatabaseCreatedMutex       sync.RWMutex
	isDatabaseCreatedArgsForCall []struct {
		databaseId string
	}
	isDatabaseCreatedReturns struct {
		result1 bool
		result2 error
	}
	IsUserCreatedStub        func(databaseId, userId string) (bool, error)
	isUserCreatedMutex       sync.RWMutex
	isUserCreatedArgsForCall []struct {
		databaseId string
		userId     string
	}
	isUserCreatedReturns struct {
		result1 bool
		result2 error
	}
	CreateDatabaseStub        func(databaseId string) error
	createDatabaseMutex       sync.RWMutex
	createDatabaseArgsForCall []struct {
		databaseId string
	}
	createDatabaseReturns struct {
		result1 error
	}
	DeleteDatabaseStub        func(databaseId string) error
	deleteDatabaseMutex       sync.RWMutex
	deleteDatabaseArgsForCall []struct {
		databaseId string
	}
	deleteDatabaseReturns struct {
		result1 error
	}
	CreateUserStub        func(databaseId, userId, password string) error
	createUserMutex       sync.RWMutex
	createUserArgsForCall []struct {
		databaseId string
		userId     string
		password   string
	}
	createUserReturns struct {
		result1 error
	}
	DeleteUserStub        func(databaseId, userId string) error
	deleteUserMutex       sync.RWMutex
	deleteUserArgsForCall []struct {
		databaseId string
		userId     string
	}
	deleteUserReturns struct {
		result1 error
	}
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct{}
	closeReturns     struct {
		result1 error
	}
}

func (fake *FakeMssqlProvisioner) IsDatabaseCreated(databaseId string) (bool, error) {
	fake.isDatabaseCreatedMutex.Lock()
	fake.isDatabaseCreatedArgsForCall = append(fake.isDatabaseCreatedArgsForCall, struct {
		databaseId string
	}{databaseId})
	fake.isDatabaseCreatedMutex.Unlock()
	if fake.IsDatabaseCreatedStub != nil {
		return fake.IsDatabaseCreatedStub(databaseId)
	} else {
		return fake.isDatabaseCreatedReturns.result1, fake.isDatabaseCreatedReturns.result2
	}
}

func (fake *FakeMssqlProvisioner) IsDatabaseCreatedCallCount() int {
	fake.isDatabaseCreatedMutex.RLock()
	defer fake.isDatabaseCreatedMutex.RUnlock()
	return len(fake.isDatabaseCreatedArgsForCall)
}

func (fake *FakeMssqlProvisioner) IsDatabaseCreatedArgsForCall(i int) string {
	fake.isDatabaseCreatedMutex.RLock()
	defer fake.isDatabaseCreatedMutex.RUnlock()
	return fake.isDatabaseCreatedArgsForCall[i].databaseId
}

func (fake *FakeMssqlProvisioner) IsDatabaseCreatedReturns(result1 bool, result2 error) {
	fake.IsDatabaseCreatedStub = nil
	fake.isDatabaseCreatedReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeMssqlProvisioner) IsUserCreated(databaseId string, userId string) (bool, error) {
	fake.isUserCreatedMutex.Lock()
	fake.isUserCreatedArgsForCall = append(fake.isUserCreatedArgsForCall, struct {
		databaseId string
		userId     string
	}{databaseId, userId})
	fake.isUserCreatedMutex.Unlock()
	if fake.IsUserCreatedStub != nil {
		return fake.IsUserCreatedStub(databaseId, userId)
	} else {
		return fake.isUserCreatedReturns.result1, fake.isUserCreatedReturns.result2
	}
}

func (fake *FakeMssqlProvisioner) IsUserCreatedCallCount() int {
	fake.isUserCreatedMutex.RLock()
	defer fake.isUserCreatedMutex.RUnlock()
	return len(fake.isUserCreatedArgsForCall)
}

func (fake *FakeMssqlProvisioner) IsUserCreatedArgsForCall(i int) (string, string) {
	fake.isUserCreatedMutex.RLock()
	defer fake.isUserCreatedMutex.RUnlock()
	return fake.isUserCreatedArgsForCall[i].databaseId, fake.isUserCreatedArgsForCall[i].userId
}

func (fake *FakeMssqlProvisioner) IsUserCreatedReturns(result1 bool, result2 error) {
	fake.IsUserCreatedStub = nil
	fake.isUserCreatedReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeMssqlProvisioner) CreateDatabase(databaseId string) error {
	fake.createDatabaseMutex.Lock()
	fake.createDatabaseArgsForCall = append(fake.createDatabaseArgsForCall, struct {
		databaseId string
	}{databaseId})
	fake.createDatabaseMutex.Unlock()
	if fake.CreateDatabaseStub != nil {
		return fake.CreateDatabaseStub(databaseId)
	} else {
		return fake.createDatabaseReturns.result1
	}
}

func (fake *FakeMssqlProvisioner) CreateDatabaseCallCount() int {
	fake.createDatabaseMutex.RLock()
	defer fake.createDatabaseMutex.RUnlock()
	return len(fake.createDatabaseArgsForCall)
}

func (fake *FakeMssqlProvisioner) CreateDatabaseArgsForCall(i int) string {
	fake.createDatabaseMutex.RLock()
	defer fake.createDatabaseMutex.RUnlock()
	return fake.createDatabaseArgsForCall[i].databaseId
}

func (fake *FakeMssqlProvisioner) CreateDatabaseReturns(result1 error) {
	fake.CreateDatabaseStub = nil
	fake.createDatabaseReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMssqlProvisioner) DeleteDatabase(databaseId string) error {
	fake.deleteDatabaseMutex.Lock()
	fake.deleteDatabaseArgsForCall = append(fake.deleteDatabaseArgsForCall, struct {
		databaseId string
	}{databaseId})
	fake.deleteDatabaseMutex.Unlock()
	if fake.DeleteDatabaseStub != nil {
		return fake.DeleteDatabaseStub(databaseId)
	} else {
		return fake.deleteDatabaseReturns.result1
	}
}

func (fake *FakeMssqlProvisioner) DeleteDatabaseCallCount() int {
	fake.deleteDatabaseMutex.RLock()
	defer fake.deleteDatabaseMutex.RUnlock()
	return len(fake.deleteDatabaseArgsForCall)
}

func (fake *FakeMssqlProvisioner) DeleteDatabaseArgsForCall(i int) string {
	fake.deleteDatabaseMutex.RLock()
	defer fake.deleteDatabaseMutex.RUnlock()
	return fake.deleteDatabaseArgsForCall[i].databaseId
}

func (fake *FakeMssqlProvisioner) DeleteDatabaseReturns(result1 error) {
	fake.DeleteDatabaseStub = nil
	fake.deleteDatabaseReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMssqlProvisioner) CreateUser(databaseId string, userId string, password string) error {
	fake.createUserMutex.Lock()
	fake.createUserArgsForCall = append(fake.createUserArgsForCall, struct {
		databaseId string
		userId     string
		password   string
	}{databaseId, userId, password})
	fake.createUserMutex.Unlock()
	if fake.CreateUserStub != nil {
		return fake.CreateUserStub(databaseId, userId, password)
	} else {
		return fake.createUserReturns.result1
	}
}

func (fake *FakeMssqlProvisioner) CreateUserCallCount() int {
	fake.createUserMutex.RLock()
	defer fake.createUserMutex.RUnlock()
	return len(fake.createUserArgsForCall)
}

func (fake *FakeMssqlProvisioner) CreateUserArgsForCall(i int) (string, string, string) {
	fake.createUserMutex.RLock()
	defer fake.createUserMutex.RUnlock()
	return fake.createUserArgsForCall[i].databaseId, fake.createUserArgsForCall[i].userId, fake.createUserArgsForCall[i].password
}

func (fake *FakeMssqlProvisioner) CreateUserReturns(result1 error) {
	fake.CreateUserStub = nil
	fake.createUserReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMssqlProvisioner) DeleteUser(databaseId string, userId string) error {
	fake.deleteUserMutex.Lock()
	fake.deleteUserArgsForCall = append(fake.deleteUserArgsForCall, struct {
		databaseId string
		userId     string
	}{databaseId, userId})
	fake.deleteUserMutex.Unlock()
	if fake.DeleteUserStub != nil {
		return fake.DeleteUserStub(databaseId, userId)
	} else {
		return fake.deleteUserReturns.result1
	}
}

func (fake *FakeMssqlProvisioner) DeleteUserCallCount() int {
	fake.deleteUserMutex.RLock()
	defer fake.deleteUserMutex.RUnlock()
	return len(fake.deleteUserArgsForCall)
}

func (fake *FakeMssqlProvisioner) DeleteUserArgsForCall(i int) (string, string) {
	fake.deleteUserMutex.RLock()
	defer fake.deleteUserMutex.RUnlock()
	return fake.deleteUserArgsForCall[i].databaseId, fake.deleteUserArgsForCall[i].userId
}

func (fake *FakeMssqlProvisioner) DeleteUserReturns(result1 error) {
	fake.DeleteUserStub = nil
	fake.deleteUserReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMssqlProvisioner) Close() error {
	fake.closeMutex.Lock()
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct{}{})
	fake.closeMutex.Unlock()
	if fake.CloseStub != nil {
		return fake.CloseStub()
	} else {
		return fake.closeReturns.result1
	}
}

func (fake *FakeMssqlProvisioner) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeMssqlProvisioner) CloseReturns(result1 error) {
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

var _ provisioner.MssqlProvisioner = new(FakeMssqlProvisioner)
