---
# The sidecar role for cf-usb-sidecar-postgres contains the main
# deployment of the sidecar (csm + extension binaries).
apiVersion: "extensions/v1beta1"
kind: "Deployment"
metadata:
  name: "cf-usb-sidecar-postgres"
  labels:
    skiff-role-name: "cf-usb-sidecar-postgres"
spec:
  replicas: 1
  template:
    metadata:
      labels:
        skiff-role-name: "cf-usb-sidecar-postgres"
      name: "cf-usb-sidecar-postgres"
    spec:
      containers:
      - image: "{{ .Values.kube.registry.hostname }}/{{ .Values.kube.organization }}/cf-usb-sidecar-postgres:latest"
        name: "cf-usb-sidecar-postgres"
        env:
        - name: "KUBERNETES_NAMESPACE"
          valueFrom:
            fieldRef:
              fieldPath: "metadata.namespace"
        - name: "SERVICE_POSTGRES_HOST"
          value:  {{ if eq ( .Values.env.PGHOST | quote ) ( "AUTO" | quote ) -}}
                    postgres.{{.Release.Namespace}}
                  {{- else -}}
                    {{ template "getvar" (dict "ctx" . "names" (list "PGHOST" "SERVICE_POSTGRESQL_HOST")) }}
                  {{- end }}
        - name: "SERVICE_POSTGRES_PORT"
          value: {{ template "getvar" (dict "ctx" . "names" (list "PGPORT" "SERVICE_POSTGRESQL_PORT")) }}
        - name: "SERVICE_POSTGRES_SSLMODE"
          value: {{ template "getvar" (dict "ctx" . "names" (list "PGSSLMODE" "SERVICE_POSTGRESQL_SSLMODE")) }}
        - name: "SERVICE_POSTGRES_USER"
          value: {{ template "getvar" (dict "ctx" . "names" (list "PGUSER" "SERVICE_POSTGRESQL_USER")) }}
        - name: "PGDATABASE"
          value: {{ template "getvar" (dict "ctx" . "names" (list "PGDATABASE")) }}
        - name: "SERVICE_POSTGRES_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "service-postgres-pass"
              name: "cf-usb-sidecar-postgres-secret"
        - name: SIDECAR_LOG_LEVEL
          value: {{ template "getvar" (dict "ctx" . "names" (list "SIDECAR_LOG_LEVEL")) }}
        - name: "SIDECAR_API_KEY"
          valueFrom:
            secretKeyRef:
              key: "sidecar-api-key"
              name: "cf-usb-sidecar-postgres-secret"
        ports:
        - containerPort: 8081
          name: "sidecar-pg"
          protocol: "TCP"
        readinessProbe:
          initialDelaySeconds: 10
          tcpSocket:
            port: 8081
        resources:
          requests:
            memory: 100M
        securityContext:
          privileged: true
      dnsPolicy: "ClusterFirst"
      imagePullSecrets:
      - name: "registry-credentials"
      restartPolicy: "Always"

---
apiVersion: "v1"
items:
- apiVersion: "v1"
  kind: "Service"
  metadata:
    name: "cf-usb-sidecar-postgres"
  spec:
    ports:
    - name: "cf-usb-sidecar-postgres"
      port: 8081
      protocol: "TCP"
      targetPort: "sidecar-pg"
    selector:
      skiff-role-name: "cf-usb-sidecar-postgres"
    type: "ClusterIP"
kind: "List"
